# Test Data for BST Implementation - Lab 7
# This file contains various datasets for testing BST operations
# Lines starting with # are comments

# EDGE CASE DATA
# =====================================================
# Special cases for testing edge conditions

SINGLE_VALUE:
42

NEGATIVE_VALUES:
-50 -25 -75 -15 -35 -60 -85 -10 -20 -30

MIXED_POSITIVE_NEGATIVE:
0 -10 10 -5 5 -15 15 -3 3 -7 7

LARGE_VALUES:
2147483647 1073741823 -2147483648 -1073741824 1000000 -1000000

SEQUENTIAL_GAPS:
10 20 30 40 50 60 70 80 90 100

# =====================================================
# PERFORMANCE TEST DATA
# =====================================================
# Datasets specifically designed for performance analysis

PERFORMANCE_BEST_100:
50 25 75 12 37 62 87 6 18 31 43 56 68 81 93 3 9 15 21 28 34 40 46 53 59 65 71 78 84 90 96 1 4 7 10 13 16 19 22 26 29 32 35 38 41 44 47 51 54 57 60 63 66 69 72 76 79 82 85 88 91 94 97 2 5 8 11 14 17 20 23 27 30 33 36 39 42 45 48 52 55 58 61 64 67 70 73 77 80 83 86 89 92 95 98 99 100

PERFORMANCE_WORST_100:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100

# =====================================================
# DELETION TEST DATA
# =====================================================
# Specific datasets for testing deletion cases

DELETE_LEAF_TEST:
50 25 75 15 35 60 85
# Delete: 15, 35, 60, 85 (all leaves)

DELETE_ONE_CHILD_TEST:
50 25 75 15 35 85 10 20 80
# Delete: 25 (one child), 75 (one child)

DELETE_TWO_CHILDREN_TEST:
50 25 75 15 35 60 85 10 20 30 40 55 65 80 90
# Delete: 25, 75, 50 (all have two children)

DELETE_ROOT_TEST:
50 25 75 15 35 60 85
# Delete: 50 (root with two children)

# =====================================================
# TRAVERSAL VERIFICATION DATA
# =====================================================
# Use these to verify traversal implementations

TRAVERSAL_TEST:
8 3 10 1 6 14 4 7 13
# Expected In-order: 1 3 4 6 7 8 10 13 14
# Expected Pre-order: 8 3 1 6 4 7 10 14 13
# Expected Post-order: 1 4 7 6 3 13 14 10 8

SIMPLE_TRAVERSAL:
5 3 7 2 4 6 8
# Expected In-order: 2 3 4 5 6 7 8
# Expected Pre-order: 5 3 2 4 7 6 8
# Expected Post-order: 2 4 3 6 8 7 5

# =====================================================
# SEARCH TEST DATA
# =====================================================
# Values to search for (some exist, some don't)

SEARCH_EXISTING:
5 3 7 2 4 6 8

SEARCH_NON_EXISTING:
1 9 0 100 -5 15

SEARCH_BOUNDARY:
1 2 8 9 0 10

# =====================================================
# STRESS TEST DATA
# =====================================================
# Large datasets for stress testing

STRESS_TEST_RANDOM:
743 291 856 124 637 982 315 468 729 186 594 871 423 756 139 685 927 264 518 792 346 679 913 257 584 798 132 465 738 291 627 854 189 536 774 218 695 941 367 623 879 145 578 816 234 667 923 381 549 785 197 634 872 419 566 813 251 688 925 368 615 859 143 576 794 229 682 936 374 621 867 156 593 819 246 675 912 389 546 783 191 638 876 423 560 807 235 672 919 366 613 851 148 581 798 224 679 934 371 628 865 159 596 822 249 686 929 378 625 873 146 583 801 227 684 937 376 633 871 162 599 825 252 689 932 381 638 876 149 586 804 230 687 940

# =====================================================
# CUSTOM TEST INSTRUCTIONS
# =====================================================
# 
# To use this data in your testing:
# 
# 1. Java Code Example:
#    Scanner scanner = new Scanner(new File("test_data.txt"));
#    while (scanner.hasNextLine()) {
#        String line = scanner.nextLine().trim();
#        if (!line.startsWith("#") && !line.isEmpty()) {
#            if (line.contains(":")) {
#                String[] parts = line.split(":");
#                String dataSetName = parts[0];
#                String[] values = parts[1].trim().split("\\s+");
#                // Process values array
#            }
#        }
#    }
#
# 2. Manual Testing:
#    Copy specific datasets and paste into your test methods
#
# 3. Performance Testing:
#    Use PERFORMANCE_BEST_100 and PERFORMANCE_WORST_100 for comparison
#
# 4. Validation:
#    Use TRAVERSAL_TEST data to verify your traversal implementations
#    Expected outputs are provided in comments
#
# =====================================================
# BALANCED TREE DATA
# =====================================================
# Insert these values to create a reasonably balanced BST
# Recommended insertion order: 50, 25, 75, 15, 35, 60, 85, 10, 20, 30, 40, 55, 65, 80, 90

BALANCED_SMALL:
50 25 75 15 35 60 85 10 20 30 40 55 65 80 90

BALANCED_MEDIUM:
50 25 75 15 35 60 85 10 20 30 40 55 65 80 90 5 12 18 22 28 32 38 42 52 58 62 68 78 82 88 95

BALANCED_LARGE:
500 250 750 125 375 625 875 62 187 312 437 562 687 812 937 31 93 156 218 281 343 406 468 531 593 656 718 781 843 906 968

# =====================================================
# DEGENERATE TREE DATA (Worst Case)
# =====================================================
# Insert these values in order to create a degenerate tree
# This creates essentially a linked list structure

DEGENERATE_ASCENDING:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20

DEGENERATE_DESCENDING:
20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1

DEGENERATE_LARGE_ASC:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50

# =====================================================
# RANDOM DATA SETS
# =====================================================
# These datasets contain random values for general testing

RANDOM_SMALL:
42 17 89 3 56 23 78 91 14 67 35 82 6 59 28 94 11 73 46 25

RANDOM_MEDIUM:
142 517 289 103 456 723 178 391 614 267 835 706 559 428 894 311 673 946 125 782 469 231 687 954 318 675 249 831 567 293 746 182 635 478 712 856 394 627 183 759

RANDOM_LARGE:
1247 3891 672 2156 4783 925 1634 3478 756 2891 1523 4167 689 3245 1876 4592 713 2468 3751 926 1584 4329 672 2917 1435 3668 789 2254 4571 1093 3426 675 2189 4738 1362 3895 624 2471 1687 4253 917 3584 1296 2768 4135 693 3427 1859 2546 4781 1173

# =====================================================
# DUPLICATE VALUE DATA
# =====================================================
# Use these to test how your BST handles duplicate values

DUPLICATES_SIMPLE:
5 3 7 3 5 7 1 1 9 9

DUPLICATES_MIXED:
10 5 15 5 10 15 3 7 12 18 3 7 12 18 1 6 8 11 14 16 20

# =====================================================